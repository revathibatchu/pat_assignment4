/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 13 03:17:29 GMT 2022
 */

package com.uh.pat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.uh.pat.AVLTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(68);
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.delete(1);
      aVLTree0.insert(0);
      aVLTree0.delete(833);
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node1.right = aVLTree_Node0;
      aVLTree_Node1.height = (-1391);
      aVLTree_Node1.key = 1845;
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      aVLTree_Node2.height = 0;
      aVLTree_Node0.height = 68;
      aVLTree_Node1.left = aVLTree_Node0;
      AVLTree.Node aVLTree_Node3 = aVLTree_Node1.left;
      aVLTree_Node2.right = aVLTree_Node3;
      aVLTree_Node2.right = aVLTree_Node1;
      aVLTree0.getBalance(aVLTree_Node2);
      aVLTree0.insert(0);
      int int0 = aVLTree0.height();
      int int1 = 1;
      aVLTree0.insert(int1);
      int int2 = 1;
      aVLTree0.delete(int2);
      aVLTree0.height();
      aVLTree0.delete(int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-3126));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree_Node0.height = (-3126);
      aVLTree0.getBalance(aVLTree_Node0);
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-3126));
      int int0 = 0;
      aVLTree_Node1.key = 0;
      AVLTree aVLTree1 = new AVLTree();
      AVLTree.Node aVLTree_Node2 = aVLTree1.new Node((-3126));
      aVLTree_Node1.right = aVLTree_Node2;
      aVLTree_Node2.height = (-3126);
      int int1 = 1;
      aVLTree_Node1.key = 1;
      aVLTree0.getBalance(aVLTree_Node1);
      aVLTree0.getBalance(aVLTree_Node1);
      int int2 = (-1059);
      aVLTree_Node0.height = (-1059);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.uh.pat.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-871));
      aVLTree0.insert(2416);
      aVLTree0.insert((-601));
      aVLTree0.height();
      aVLTree0.find((-137));
      aVLTree0.find(1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 0;
      aVLTree0.insert(0);
      aVLTree0.delete(1);
      aVLTree0.delete(0);
      aVLTree0.insert(1);
      int int1 = 0;
      aVLTree0.insert(0);
      int int2 = 0;
      aVLTree0.delete(0);
      aVLTree0.find(0);
      aVLTree0.delete((-748));
      aVLTree0.insert(0);
      aVLTree0.delete(547);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.uh.pat.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 0;
      aVLTree0.delete(0);
      int int1 = 0;
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node1.right = aVLTree_Node0;
      aVLTree0.getBalance(aVLTree_Node1);
      // Undeclared exception!
      aVLTree0.find(1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.delete((-3138));
      aVLTree0.insert(0);
      aVLTree0.delete((-2200));
      aVLTree0.insert((-2464));
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.uh.pat.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1759);
      aVLTree0.delete(1759);
      aVLTree0.insert(1759);
      int int0 = (-1);
      aVLTree0.insert((-1));
      int int1 = 0;
      aVLTree0.delete(0);
      aVLTree0.delete(4104);
      aVLTree0.height();
      aVLTree0.insert(3683);
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node1.height = 0;
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree_Node1.left = aVLTree_Node0.left;
      AVLTree.Node aVLTree_Node2 = aVLTree_Node0.right;
      aVLTree_Node0.left.left = aVLTree_Node1.left;
      aVLTree_Node2.left = aVLTree_Node0;
      aVLTree0.getBalance(aVLTree_Node2);
      // Undeclared exception!
      aVLTree0.delete(1759);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = (-679);
      aVLTree0.delete((-679));
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-679));
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node1);
      
      aVLTree0.insert(1);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals((-1), aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(0);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node2);
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node3);
      assertSame(aVLTree_Node3, aVLTree_Node2);
      
      aVLTree_Node2.left = aVLTree_Node3;
      assertEquals(0, aVLTree0.height());
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        aVLTree0.delete(int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(3526);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1777);
      assertEquals(0, aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(3526);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(1024);
      assertEquals(0, aVLTree0.height());
      assertNull(aVLTree_Node2);
      
      aVLTree0.delete(1376);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(357);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1376);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(343);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1777);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1777);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(3908);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(1376);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.find((-1651));
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node3);
      
      aVLTree0.delete((-1512));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(357);
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node4 = aVLTree0.find((-2143));
      assertEquals(2, aVLTree0.height());
      assertNull(aVLTree_Node4);
      
      AVLTree.Node aVLTree_Node5 = aVLTree0.find(1777);
      assertEquals(2, aVLTree0.height());
      assertFalse(aVLTree_Node5.equals((Object)aVLTree_Node1));
      assertNotNull(aVLTree_Node5);
      assertNotSame(aVLTree_Node5, aVLTree_Node1);
      
      AVLTree.Node aVLTree_Node6 = aVLTree0.find((-1651));
      assertEquals(2, aVLTree0.height());
      assertNull(aVLTree_Node6);
      
      AVLTree.Node aVLTree_Node7 = aVLTree0.find((-2143));
      assertEquals(2, aVLTree0.height());
      assertNull(aVLTree_Node7);
      
      aVLTree0.insert((-1));
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.insert(1024);
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node8 = aVLTree0.find(959);
      assertEquals(2, aVLTree0.height());
      assertNull(aVLTree_Node8);
      
      AVLTree.Node aVLTree_Node9 = aVLTree0.find(74);
      assertEquals(2, aVLTree0.height());
      assertNull(aVLTree_Node9);
      
      AVLTree.Node aVLTree_Node10 = aVLTree0.find(74);
      assertEquals(2, aVLTree0.height());
      assertNull(aVLTree_Node10);
      
      AVLTree.Node aVLTree_Node11 = aVLTree0.find((-1976));
      assertEquals(2, aVLTree0.height());
      assertNull(aVLTree_Node11);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(4086);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-3883));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-3883));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node(4086);
      assertEquals(1, aVLTree0.height());
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertNotNull(aVLTree_Node1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = (-1634);
      aVLTree0.delete((-1634));
      assertEquals((-1), aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1));
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      aVLTree0.delete((-1634));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-1634));
      assertEquals(0, aVLTree0.height());
      
      int int2 = 0;
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1273);
      assertEquals(0, aVLTree0.height());
      
      int int3 = 0;
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(0);
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node2);
      assertSame(aVLTree_Node2, aVLTree_Node1);
      
      aVLTree_Node1.height = 1;
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete((-987));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.uh.pat.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(2104);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1086));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1437);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1147);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-1086));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = null;
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int0);
      
      int int1 = aVLTree0.height();
      assertEquals(0, aVLTree0.height());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      aVLTree0.delete((-2156));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(1);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node2);
      assertSame(aVLTree_Node2, aVLTree_Node1);
      
      aVLTree_Node2.right = aVLTree_Node1;
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(3763);
      aVLTree_Node1.right = aVLTree_Node0;
      aVLTree0.getBalance(aVLTree_Node2);
      int int2 = aVLTree0.getBalance(aVLTree_Node2);
      int int3 = (-1400);
      aVLTree_Node1.height = int3;
      aVLTree0.delete(int1);
      int int4 = 0;
      aVLTree0.delete(int4);
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node1);
      aVLTree0.delete(int2);
      int int5 = (-3295);
      aVLTree0.delete(int5);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-2200));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-2464));
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.uh.pat.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(4034);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(554);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1849);
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(2, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      int int0 = aVLTree0.height();
      assertEquals(2, aVLTree0.height());
      assertEquals(2, int0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node((-382));
      assertEquals(2, aVLTree0.height());
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node0.left = aVLTree_Node1;
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(1);
      assertEquals(2, aVLTree0.height());
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node1));
      assertNotNull(aVLTree_Node2);
      assertSame(aVLTree_Node2, aVLTree_Node0);
      assertNotSame(aVLTree_Node2, aVLTree_Node1);
      
      int int1 = aVLTree0.height();
      assertEquals(2, aVLTree0.height());
      assertTrue(int1 == int0);
      assertEquals(2, int1);
      
      aVLTree_Node1.left = aVLTree_Node0;
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(673);
      assertEquals(5, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.getRoot();
      assertEquals(5, aVLTree0.height());
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node1));
      assertNotNull(aVLTree_Node3);
      assertNotSame(aVLTree_Node3, aVLTree_Node1);
      assertSame(aVLTree_Node3, aVLTree_Node2);
      assertSame(aVLTree_Node3, aVLTree_Node0);
      
      aVLTree0.delete((-1650));
      assertEquals(8, aVLTree0.height());
      
      int int2 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(8, aVLTree0.height());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(aVLTree_Node0.equals((Object)aVLTree_Node1));
      assertEquals((-7), int2);
      assertSame(aVLTree_Node0, aVLTree_Node3);
      assertSame(aVLTree_Node0, aVLTree_Node2);
      assertNotSame(aVLTree_Node0, aVLTree_Node1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(3330);
      aVLTree0.insert(1);
      aVLTree0.delete(1);
      aVLTree0.delete(1);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(361);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.insert((-474));
      aVLTree0.insert(361);
      aVLTree0.insert(0);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      try { 
        aVLTree0.insert(361);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.uh.pat.AVLTree", e);
      }
  }
}
